generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
  MODERATOR
}

model User {
  id        String   @id @default(cuid())
  name      String
  email     String   @unique
  password  String
  role      Role     @default(USER)
  reviews   Review[]
  createdAt DateTime @default(now())

  Order Order[]

  Cart Cart[]
}

model Product {
  id              String          @id @default(cuid())
  name            String          @map("productName")
  description     String          @map("productDescription")
  price           Float           @map("productPrice")
  stock           Int             @map("productStock")
  sku             String          @unique @map("productSKU")
  variants        String[]        @map("productVariants")
  tags            String[]        @map("productTags")
  images          String[]        @map("productImages")
  sizes           String[]        @map("productSize")
  features        String[]        @map("productFeatures")
  careInstruction String?
  category        Category        @relation(fields: [categoryId], references: [id])
  categoryId      String          @map("productCategory")
  specifications  Specification[]
  reviews         Review[]
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  isFeatured      Boolean         @default(false) @map("productIsFeatured")
  OrderItem       OrderItem[]
  CartItem        CartItem[]

  @@map("products")
}

model Review {
  id        String   @id @default(cuid())
  comment   String
  rating    Int
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  product   Product  @relation(fields: [productId], references: [id])
  productId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([productId])
  @@map("product_reviews")
}

model Specification {
  id        String  @id @default(cuid())
  key       String
  value     String
  product   Product @relation(fields: [productId], references: [id])
  productId String

  @@map("product_specifications")
}

model Category {
  id        String    @id
  label     String
  value     String    @unique
  products  Product[]
  createdAt DateTime  @default(now())
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

enum PaymentMethod {
  COD
  CARD
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
}

model Order {
  id                 String          @id @default(cuid())
  orderNumber        String          @unique
  user               User            @relation(fields: [userId], references: [id])
  userId             String
  items              OrderItem[]
  totalAmount        Float
  subtotal           Float
  shippingCost       Float
  tax                Float
  paymentMethod      PaymentMethod
  paymentStatus      PaymentStatus   @default(PENDING)
  shippingAddress    String
  shippingCity       String
  shippingState      String
  shippingPostalCode String
  shippingCountry    String
  shippingMethod     ShippingMethod? @relation(fields: [shippingMethodId], references: [id])
  shippingMethodId   String?
  status             OrderStatus     @default(PENDING)
  createdAt          DateTime        @default(now())
  updatedAt          DateTime        @updatedAt
  trackingNumber     String?
  cancellationReason String?
  payment            Payment?

  @@index([userId])
  @@index([status])
  @@index([createdAt])
  @@map("orders")
}

model OrderItem {
  id        String   @id @default(cuid())
  order     Order    @relation(fields: [orderId], references: [id])
  orderId   String
  product   Product  @relation(fields: [productId], references: [id])
  productId String
  quantity  Int
  price     Float
  size      String?
  color     String?
  createdAt DateTime @default(now())

  @@map("order_items")
}

model Payment {
  id             String        @id @default(cuid())
  order          Order         @relation(fields: [orderId], references: [id])
  orderId        String        @unique
  amount         Float
  method         PaymentMethod
  transactionId  String?
  last4Digits    String?
  expirationDate String?
  status         PaymentStatus @default(PENDING)
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt

  @@index([orderId])
  @@index([transactionId])
  @@map("payments")
}

model ShippingMethod {
  id       String  @id @default(cuid())
  name     String
  cost     Float
  duration String
  orders   Order[]
  active   Boolean @default(true)

  @@map("shipping_methods")
}

model Cart {
  id        String     @id @default(cuid())
  user      User       @relation(fields: [userId], references: [id])
  userId    String     @unique
  items     CartItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  @@map("carts")
}

model CartItem {
  id        String   @id @default(cuid())
  cart      Cart     @relation(fields: [cartId], references: [id])
  cartId    String
  product   Product  @relation(fields: [productId], references: [id])
  productId String
  quantity  Int
  size      String?
  color     String?
  createdAt DateTime @default(now())

  @@unique([cartId, productId, size, color])
  @@map("cart_items")
}
